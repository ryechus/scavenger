# coding: utf-8

"""
    Auction API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
import uuid
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr

from scavenger_auctions.models.auction_current_bid import AuctionCurrentBid

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Auction(BaseModel):
    """
    Auction
    """  # noqa: E501

    id: Optional[uuid.UUID] = Field(default=None, description="this field is read only")
    name: Optional[StrictStr] = None
    starting_datetime: Optional[datetime] = None
    ending_datetime: Optional[datetime] = None
    starting_price: StrictInt = Field(default=None, description="starting price of auction in USD cents")
    current_bid: Optional[AuctionCurrentBid] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "starting_datetime",
        "ending_datetime",
        "starting_price",
        "current_bid",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Auction from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_bid
        if self.current_bid:
            _dict["current_bid"] = self.current_bid.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Auction from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "starting_datetime": obj.get("starting_datetime"),
                "ending_datetime": obj.get("ending_datetime"),
                "starting_price": obj.get("starting_price"),
                "current_bid": (
                    AuctionCurrentBid.from_dict(obj.get("current_bid"))
                    if obj.get("current_bid") is not None
                    else None
                ),
            }
        )
        return _obj

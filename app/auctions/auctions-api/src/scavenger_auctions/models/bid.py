# coding: utf-8

"""
    Auction API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
import uuid
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


class Bid(BaseModel):
    """
    Bid
    """  # noqa: E501

    id: Optional[StrictStr | uuid.UUID] = None
    auction_id: Optional[StrictStr | uuid.UUID] = None
    bid_amount: Optional[
        Union[Annotated[float, Field(strict=True, ge=0.01)], Annotated[int, Field(strict=True, ge=1)]]
    ] = None
    max_bid_amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, description="0 or must be greater than bid_amount"
    )
    client_timestamp: Optional[datetime] = None
    customer_id: Optional[StrictStr | uuid.UUID] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "auction_id",
        "bid_amount",
        "max_bid_amount",
        "client_timestamp",
        "customer_id",
    ]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of Bid from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={},
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of Bid from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "auction_id": obj.get("auction_id"),
                "bid_amount": obj.get("bid_amount"),
                "max_bid_amount": obj.get("max_bid_amount"),
                "client_timestamp": obj.get("client_timestamp"),
                "customer_id": obj.get("customer_id"),
            }
        )
        return _obj
